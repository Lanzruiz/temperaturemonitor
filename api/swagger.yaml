swagger: "2.0"
info:
  description: "The Monika Cloud Cloud Platform API provides web services for the Monika suite of apps and systems."
  version: "0.1.0"
  title: "Monika Cloud Patform API"
  termsOfService: "https://cloud.monika.com/terms/"
  contact:
    email: "swood@monika.com"
  license:
    name: "Commercial"
    url: "http://cloud.monika.com/licenses/license-1.0.html"
host: "cloud.monika.com"
basePath: "/api/v1"
tags:
- name: "user"
  description: "User management, logins, passwords and permissions"
- name: "tenant"
  description: "Tenant management, backups, restores, activation and deactivation"
- name: "case"
  description: "Case management, smart diagnostics, commenting and file attachments"
  externalDocs:
    description: "Find out more about how cases work"
    url: "http://www.monika.com/case-management"
- name: "dashboard"
  description: "Dashboards and widgets"
- name: "role"
  description: "User roles"
schemes:
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Add a new user to the system"
      description: "Add a new user to the system"
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The user object to be added"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User successfuly added"
        405:
          description: "Invalid input"
    put:
      tags:
      - "user"
      summary: "Update an existing user's details in the system"
      description: "Updates the users details"
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The user object to be updated"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User successfuly updated"
        405:
          description: "Invalid input"
        404:
          description: "User not found"
    get:
      tags:
      - "user"
      summary: "Get a list of users, filtered and sorted"
      description: "Get a list of users, filtered and sorted"
      operationId: "listUsers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "query"
        description: "Query parameters that filter and sort the list"
        required: false
        schema:
          $ref: "#/definitions/UserListFilterAndSortQuery"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid query data"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Retreive the details of the user by id"
      description: "Retreive the details of the user by id"
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id of the user account you would like to activate"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "User already active"
        404:
          description: "User not found"
  
  /user/activate/{userId}:
    patch:
      tags:
      - "user"
      summary: "Activates a user that was previously deactivated"
      description: "Activates a user that was previously deactivated"
      operationId: "activateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id of the user account you would like to activate"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "User already active"
        404:
          description: "User not found"
  /user/deactivate/{userId}:
    patch:
      tags:
      - "user"
      summary: "Deactivates a user that was previously deactivated"
      description: "A user cannot be deleted from the system, because there may be audit records assocaited with them. Instead, we deactivate the user."
      operationId: "deactivateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id of the user account you would like to deactivate"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "User already deactivated"
        404:
          description: "User not found"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The email address of the user logging in"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/2fa/{userId}:
    delete:
      tags:
      - "user"
      summary: "Deletes or resets the users 2fa key"
      description: "To reset a users 2fa, we delete their 2fa key so that upon next login, it asks the user to setup 2fa again"
      operationId: "userDelete2FA"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id of the user who's 2FA service you would like to delete or reset"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "User's 2FA Key was successfully deleted."
        404:
          description: "User not found"
    get:
      tags:
      - "user"
      summary: "Get the current 2FA settings (and key) for the user or create one if it doesn't exist"
      description: "If the user does not have 2FA configured, when they log in they will be prompted to set it up. This call returns the key which can be used on a key generation app such as Authy, Google Authenticator, etc"
      operationId: "userNew2FAKey"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id of the user who's 2FA service you would generate and retrieve a new key for"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "User's 2FA Key was successfully deleted."
          schema:
            $ref: "#/definitions/User2FASettings"
        404:
          description: "User not found"
  /user/2fa/activate/{userId}:
    put:
      tags:
      - "user"
      summary: "Activate the current 2FA key for the user"
      description: "To activate the 2FA key for the user, a valid 2FA token must be received."
      operationId: "userActivate2FA"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id of the user who's 2FA service you would like to activate"
        required: true
        type: "integer"
        format: "int64"
      - name: "2FAToken"
        in: "body"
        description: "The generated Token as at the current date/time"
        required: true
        type: "string"
      responses:
        200:
          description: "Success. The 2FA service for the user was activated"
        404:
          description: "User not found"
  /user/2fa/verify/{userId):
    post:
      tags:
      - "user"
      summary: "Send the 2FA token and verify the session"
      description: "After validating email and password, the 2FA token must be provided to validate the users session. This call receives the 2FA token and validates the users session."
      operationId: "userVerify2FA"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id of the user who's 2FA service you would like to activate"
        required: true
        type: "integer"
        format: "int64"
      - name: "2FAToken"
        in: "body"
        description: "The generated Token as at the current date/time"
        required: true
        type: "string"
      responses:
        200:
          description: "Success. The 2FA service for the user was activated"
        404:
          description: "User not found"
  /user/password/reset/email:
    post:
      tags:
      - "user"
      summary: "Request a password reset code be sent to your email address"
      description: "If the email address is found, a password reset code will be sent."
      operationId: "userPasswordResetSendCodeToEmail"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "emailAddress"
        in: "body"
        description: "the email address of the user"
        required: true
        type: "string"
        format: "email"
      responses:
        200:
          description: "Success. A password reset token has been emailed to the users email address."
        404:
          description: "A user with that email address was not found."
  /user/password/reset/check:
    get:
      tags:
      - "user"
      summary: "check that the password reset code is valid"
      description: "If the email address is found, a passsword reset code will be sent."
      operationId: "userPasswordResetCheckCode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "passwordResetCode"
        in: "body"
        description: "the password reset code"
        required: true
        type: "string"
        format: "password"
      responses:
        200:
          description: "Success. The password reset code is valid."
        404:
          description: "A password reset request with that code was not found."
  /user/password/reset/change:
    post:
      tags:
      - "user"
      summary: "As part of the password reset process, change the users password using the reset code"
      description: "As part of the password reset process, change the users password using the reset code"
      operationId: "userPasswordResetChangePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "passwordResetCode"
        in: "body"
        description: "the password reset code"
        required: true
        type: "string"
        format: "password"
      - name: "password"
        in: "body"
        description: "the new password"
        required: true
        type: "string"
        format: "password"
      - name: "confirmPassword"
        in: "body"
        description: "the new password, again to confirm the user has entered it correctly"
        required: true
        type: "string"
        format: "password"
      responses:
        200:
          description: "Success. The user's password has been changed"
        400:
          description: "Failed. The passwords do not match. Please try again."
        404:
          description: "A password reset request with that code was not found."
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    required:
    - "email"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      status:
        type: "string"
        description: "Status"
        enum:
        - "active"
        - "deactivated"
      companyName:
        type: "string"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"